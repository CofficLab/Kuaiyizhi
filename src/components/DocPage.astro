---
import DocLayout from '@layouts/DocLayout.astro';
import ContentDB from '@/database/ContentDB';
import { render } from 'astro:content';
import SidebarDB from '@/database/SidebarDB';
import { getLangFromSlug } from '@/utils/lang';
import { logger } from '@/utils/logger';
import Tag from '@/models/Tag';

export interface Props {
  slug: string;
  redirectPath: string;
}

const { slug, redirectPath } = Astro.props;

const debug = false;

if (debug) {
  logger.info(`ðŸ“‘ DocPage: slug: ${slug}`);
}

const doc = await ContentDB.getDocBySlug(slug);

if (!doc) {
  return Astro.redirect(redirectPath, 307);
}

const { Content, headings } = await render(doc);

const topCategory = ContentDB.getTopCategoryFromSlug(slug);
const lang = getLangFromSlug(slug);

if (debug) {
  logger.info(`ðŸ“‘ DocPage: topCategory: ${topCategory}`);
  logger.info(`ðŸ“‘ DocPage: lang: ${lang}`);
}

let sidebarItem;
if (topCategory === 'meta') {
  sidebarItem = await SidebarDB.getSidebarItemBySlug(
    ContentDB.getParentDocSlug(slug),
    2
  );
} else if (topCategory === 'blogs') {
  sidebarItem = await Tag.makeRootSidebarItem();
} else {
  sidebarItem = await SidebarDB.getSidebarItemByDocId(
    ContentDB.slugToId(slug),
    1
  );
}

if (debug) {
  console.log('ðŸ“‘ DocPage: sidebarItem', sidebarItem);
}
---

<DocLayout
  title={doc.data.title as string}
  description={doc.data.description as string}
  sidebarItem={sidebarItem}
  headings={headings}
  hasSidebar={true}>
  <Content />
</DocLayout>
