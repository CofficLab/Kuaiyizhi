---
import DocLayout from '@layouts/DocLayout.astro';
import {
  getDocBySlug,
  getParentDocSlug,
  getTopCategoryFromDocId,
  getTopCategoryFromSlug,
} from '@database/content_db';
import { render } from 'astro:content';
import {
  getSidebarItemByDocId,
  getSidebarItemBySlug,
  getSidebarItemsByDocId,
} from '@/database/sidebar_db';
import { slugToId } from '@database/content_db';
import { getTagSidebarItem } from '@/database/blog_db';
import { getLangFromSlug } from '@/utils/lang';
import { logger } from '@/utils/logger';

export interface Props {
  slug: string;
  redirectPath: string;
}

const { slug, redirectPath } = Astro.props;

const debug = true;

if (debug) {
  console.log('ðŸ“‘ DocPage: slug', slug);
}

const doc = await getDocBySlug(slug);

if (!doc) {
  return Astro.redirect(redirectPath, 307);
}

const { Content, headings } = await render(doc);

const topCategory = getTopCategoryFromSlug(slug);
const lang = getLangFromSlug(slug);

if (debug) {
  logger.info(`ðŸ“‘ DocPage: topCategory: ${topCategory}`);
  logger.info(`ðŸ“‘ DocPage: lang: ${lang}`);
}

let sidebarItem;
if (topCategory === 'meta') {
  sidebarItem = await getSidebarItemBySlug(getParentDocSlug(slug), 2);
} else if (topCategory === 'blogs') {
  sidebarItem = await getTagSidebarItem(lang);
} else {
  sidebarItem = await getSidebarItemByDocId(slugToId(slug), 1);
}

if (debug) {
  console.log('ðŸ“‘ DocPage: sidebarItem', sidebarItem);
}
---

<DocLayout
  title={doc.data.title as string}
  description={doc.data.description as string}
  sidebarItem={sidebarItem}
  headings={headings}
  hasSidebar={true}>
  <Content />
</DocLayout>
