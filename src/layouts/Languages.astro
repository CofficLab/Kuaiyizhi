---
// 获取当前页面路径和语言
const { pathname } = Astro.url;
const currentLanguage = pathname.split('/')[1] || 'zh-cn';

// 支持的语言列表
const languages = [
  { code: 'zh-cn', name: '简体中文' },
  { code: 'en', name: 'English' },
];

// 获取当前选中的语言名称
const currentLanguageName =
  languages.find((lang) => lang.code === currentLanguage)?.name || '简体中文';
---

<div class="dropdown dropdown-end">
  <div tabindex="0" role="button" class="btn btn-ghost btn-sm p-1">
    {currentLanguageName}
  </div>
  <ul
    tabindex="0"
    class="dropdown-content menu bg-base-100 rounded-box z-[1] w-40 p-2 shadow">
    {
      languages.map((lang) => (
        <li>
          <a
            href="#"
            data-lang-code={lang.code}
            class={currentLanguage === lang.code ? 'active' : ''}>
            {lang.name}
          </a>
        </li>
      ))
    }
  </ul>
</div>

<script>
  // 处理语言切换逻辑
  const languageLinks = document.querySelectorAll('[data-lang-code]');

  languageLinks.forEach((link) => {
    link.addEventListener('click', (e) => {
      e.preventDefault();
      const target = e.currentTarget as HTMLElement;
      const newLang = target.getAttribute('data-lang-code');
      const currentPath = window.location.pathname;

      // 获取当前路径的部分
      const pathParts = currentPath.split('/').filter(Boolean);
      const currentLang = pathParts[0];

      // 检查第一部分是否是语言代码
      const supportedLanguages = ['zh-cn', 'en', 'ja'];
      const isFirstPartLang = supportedLanguages.includes(currentLang);

      let newPath;
      if (isFirstPartLang) {
        // 替换当前语言
        pathParts[0] = newLang || 'zh-cn'; // 确保 newLang 不为 null，如果为 null 则使用默认语言
        newPath = '/' + pathParts.join('/');
      } else {
        // 在路径前添加新语言
        newPath = '/' + newLang;
      }

      // 跳转到新路径
      window.location.href = newPath;
    });
  });
</script>
