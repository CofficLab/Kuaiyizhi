---
import { Image } from 'astro:assets';
import logo from '@/assets/logo.png';
import { RiGithubFill, RiSearch2Line, RiMenuLine, RiSunCloudyLine } from '@remixicon/vue';

import LinkDB from '@/utils/link';
import ThemeItem from './ThemeItem.astro';
import Link from '@/components/common/Link.vue';
import UserInfo from '@/components/UserInfo.vue';
import { getLangFromUrl } from '@/i18n/utils';

const currentPath = Astro.url.pathname;
const normalizedLocale = getLangFromUrl(Astro.url);

const languages = [
    { code: 'zh-cn', name: '简体中文' },
    { code: 'en', name: 'English' },
];

const themes = [
    { id: 'default', name: 'Default' },
    { id: 'light', name: 'Light' },
    { id: 'dark', name: 'Dark' },
    { id: 'pastel', name: 'Pastel' },
    { id: 'lemonade', name: 'Lemonade' },
    { id: 'cupcake', name: 'Cupcake' },
    { id: 'nord', name: 'Nord' },
    { id: 'business', name: 'Business' },
    { id: 'luxury', name: 'Luxury' },
];

const socialLinks = [
    {
        name: 'GitHub',
        url: 'https://github.com/CofficLab',
        icon: RiGithubFill,
    },
];

const currentLanguageName =
    languages.find(lang => lang.code === normalizedLocale)?.name || '简体中文';

// 为每个语言生成对应的URL
function generateLanguageUrl(langCode: string): string {
    const pathParts = currentPath.split('/').filter(Boolean);
    const firstPathPart = pathParts[0];
    const supportedLanguages = languages.map(lang => lang.code);
    const isFirstPartLang = supportedLanguages.includes(firstPathPart);

    if (isFirstPartLang) {
        pathParts[0] = langCode;
        return '/' + pathParts.join('/');
    } else {
        return '/' + langCode + (currentPath === '/' ? '' : currentPath);
    }
}
---

<header
    class="bg-base-300/85 backdrop-blur
    flex flex-row justify-between
    text-base-content
    px-4
    rounded-lg h-12 mt-1 mx-4 fixed top-0 left-0 right-0 z-50
    border border-base-content/5">
    <div class="flex flex-row justify-start items-center">
        <Link href="/" transition:persist>
            <div class="h-8 w-8 flex flex-col items-center justify-center">
                <Image src={logo} alt="logo" class="fill-current" transition:persist />
            </div>
        </Link>
    </div>

    <div class="h-12 flex flex-row justify-end gap-2 items-center">
        <UserInfo client:load lang={normalizedLocale} />
        <div class="dropdown dropdown-end">
            <div tabindex={0} role="button" class="btn btn-ghost btn-sm p-1">
                {currentLanguageName}
            </div>
            <ul
                tabindex={0}
                class="dropdown-content menu bg-slate-900 dark:bg-slate-800 rounded-box z-[1] w-40 p-2 shadow-lg">
                {
                    languages.map(lang => (
                        <li>
                            <Link
                                href={generateLanguageUrl(lang.code)}
                                class:list={[
                                    {
                                        'bg-primary text-white': normalizedLocale === lang.code,
                                    },
                                ]}>
                                {lang.name}
                            </Link>
                        </li>
                    ))
                }
            </ul>
        </div>
        <div class="dropdown dropdown-end">
            <div tabindex={0} role="button" class="btn btn-ghost btn-sm p-1">
                <RiSunCloudyLine class="w-5 h-5" />
            </div>
            <ul
                tabindex={0}
                class="dropdown-content menu bg-neutral-900 dark:bg-neutral-800 rounded-box z-[1] w-56 p-2 shadow-lg">
                {themes.map(theme => <ThemeItem theme={theme.id} label={theme.name} />)}
            </ul>
        </div>
        <button class="btn btn-ghost btn-sm p-1" onclick="my_modal_1.showModal()">
            <RiSearch2Line class="w-5 h-5" />
        </button>
        {
            socialLinks.map(link => (
                <Link href={link.url} external externalClass="btn btn-ghost btn-sm p-1">
                    <link.icon class="w-5 h-5" />
                    <span class="sr-only">{link.name}</span>
                </Link>
            ))
        }
    </div>
</header>

<script>
    function initializeThemeSwitch() {
        const themeItems = document.querySelectorAll('[data-set-theme]');
        const updateActiveTheme = (currentTheme: string) => {
            themeItems.forEach(item => {
                const themeId = item.getAttribute('data-set-theme');
                const isActive = themeId === currentTheme;
                item.classList.toggle('bg-primary', isActive);
                item.classList.toggle('text-primary-content', isActive);
            });
        };

        themeItems.forEach(item => {
            // 移除可能存在的旧事件监听器
            item.removeEventListener('click', handleThemeClick);
            // 添加新的事件监听器
            item.addEventListener('click', handleThemeClick);
        });

        function handleThemeClick(event: Event) {
            const item = event.currentTarget as HTMLElement;
            const theme = item.getAttribute('data-set-theme');
            document.documentElement.setAttribute('data-theme', theme ?? 'default');
            localStorage.setItem('theme', theme ?? 'default');
            updateActiveTheme(theme ?? 'default');
        }

        // 从本地存储中获取主题并更新激活状态
        const savedTheme = localStorage.getItem('theme') || 'default';
        document.documentElement.setAttribute('data-theme', savedTheme);
        updateActiveTheme(savedTheme);
    }

    // 初始加载时初始化
    document.addEventListener('DOMContentLoaded', initializeThemeSwitch);

    // Astro view transitions 后重新初始化
    document.addEventListener('astro:after-swap', initializeThemeSwitch);
</script>
