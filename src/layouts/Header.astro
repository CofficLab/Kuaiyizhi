---
import { Image } from 'astro:assets';
import logo from '@/assets/logo.png';
import {
  RiGithubFill,
  RiSearch2Line,
  RiMenuLine,
  RiSunCloudyLine,
} from '@remixicon/vue';
import Search from 'astro-pagefind/components/Search';
import LinkDB from '@/utils/link';
import ThemeItem from './ThemeItem.astro';
import Link from '@/components/common/Link.vue';
import UserInfo from '@/components/UserInfo.vue';
import { getLangFromUrl } from '@/i18n/utils';

const currentPath = Astro.url.pathname;
const normalizedLocale = getLangFromUrl(Astro.url);

const languages = [
  { code: 'zh-cn', name: '简体中文' },
  { code: 'en', name: 'English' },
];

const themes = [
  { id: 'default', name: 'Default' },
  { id: 'light', name: 'Light' },
  { id: 'dark', name: 'Dark' },
  { id: 'pastel', name: 'Pastel' },
  { id: 'lemonade', name: 'Lemonade' },
  { id: 'cupcake', name: 'Cupcake' },
  { id: 'nord', name: 'Nord' },
  { id: 'business', name: 'Business' },
  { id: 'luxury', name: 'Luxury' },
];

const socialLinks = [
  {
    name: 'GitHub',
    url: 'https://github.com/CofficLab',
    icon: RiGithubFill,
  },
];

const currentLanguageName =
  languages.find((lang) => lang.code === normalizedLocale)?.name || '简体中文';

const navItems = [
  {
    href: LinkDB.getHomeLink(normalizedLocale),
    label: normalizedLocale === 'zh-cn' ? '首页' : 'Home',
    match: (path: string) => LinkDB.isHomeLink(path, normalizedLocale),
  },
  {
    href: LinkDB.getLessonsLink(normalizedLocale),
    label: 'Build Your Own X',
    match: (path: string) => LinkDB.isLessonsLink(path, normalizedLocale),
  },
  {
    href: LinkDB.getBlogsLink(normalizedLocale),
    label: normalizedLocale === 'zh-cn' ? '博客' : 'Blogs',
    match: (path: string) => LinkDB.isBlogsLink(path, normalizedLocale),
  },
];

// 为每个语言生成对应的URL
function generateLanguageUrl(langCode: string): string {
  const pathParts = currentPath.split('/').filter(Boolean);
  const firstPathPart = pathParts[0];
  const supportedLanguages = languages.map((lang) => lang.code);
  const isFirstPartLang = supportedLanguages.includes(firstPathPart);

  if (isFirstPartLang) {
    pathParts[0] = langCode;
    return '/' + pathParts.join('/');
  } else {
    return '/' + langCode + (currentPath === '/' ? '' : currentPath);
  }
}
---

<header
  class="bg-base-300/85 backdrop-blur
    flex flex-row justify-between
    text-base-content
    px-4
    rounded-lg h-12 mt-1 mx-4 fixed top-0 left-0 right-0 z-50
    border border-base-content/5">
  <div class="flex flex-row justify-start items-center">
    <Link href="/" transition:persist>
      <div class="h-8 w-8 flex flex-col items-center justify-center">
        <Image src={logo} alt="logo" class="fill-current" transition:persist />
      </div>
    </Link>

    <!-- 移动端菜单按钮 -->
    <button
      class="lg:hidden btn btn-ghost btn-sm p-1 ml-2"
      onclick="mobile_menu.showModal()">
      <RiMenuLine class="w-5 h-5" />
    </button>

    <!-- 桌面端导航 -->
    <div
      class="hidden lg:flex flex-row gap-4 items-center ml-4"
      transition:animate="fade">
      {
        navItems.map((item) => (
          <Link
            class:list={[
              'btn btn-sm',
              {
                'btn-ghost': !item.match(currentPath),
                'btn-primary': item.match(currentPath),
              },
            ]}
            href={item.href}>
            {item.label}
          </Link>
        ))
      }
    </div>
  </div>

  <div class="h-12 flex flex-row justify-end gap-2 items-center">
    <UserInfo client:load lang={normalizedLocale} />
    <div class="dropdown dropdown-end">
      <div tabindex={0} role="button" class="btn btn-ghost btn-sm p-1">
        {currentLanguageName}
      </div>
      <ul
        tabindex={0}
        class="dropdown-content menu bg-slate-900 dark:bg-slate-800 rounded-box z-[1] w-40 p-2 shadow-lg">
        {
          languages.map((lang) => (
            <li>
              <Link
                href={generateLanguageUrl(lang.code)}
                class:list={[
                  {
                    'bg-primary text-white': normalizedLocale === lang.code,
                  },
                ]}>
                {lang.name}
              </Link>
            </li>
          ))
        }
      </ul>
    </div>
    <div class="dropdown dropdown-end">
      <div tabindex={0} role="button" class="btn btn-ghost btn-sm p-1">
        <RiSunCloudyLine class="w-5 h-5" />
      </div>
      <ul
        tabindex={0}
        class="dropdown-content menu bg-neutral-900 dark:bg-neutral-800 rounded-box z-[1] w-56 p-2 shadow-lg">
        {
          themes.map((theme) => (
            <ThemeItem theme={theme.id} label={theme.name} />
          ))
        }
      </ul>
    </div>
    <button class="btn btn-ghost btn-sm p-1" onclick="my_modal_1.showModal()">
      <RiSearch2Line class="w-5 h-5" />
    </button>
    {
      socialLinks.map((link) => (
        <Link href={link.url} external externalClass="btn btn-ghost btn-sm p-1">
          <link.icon class="w-5 h-5" />
          <span class="sr-only">{link.name}</span>
        </Link>
      ))
    }
  </div>
</header>

<!-- 移动端菜单模态框 -->
<dialog id="mobile_menu" class="modal">
  <div class="modal-box bg-base-300 text-base-content">
    <h3 class="font-bold text-lg mb-4">
      {normalizedLocale === 'zh-cn' ? '菜单' : 'Menu'}
    </h3>
    <div class="flex flex-col gap-2">
      {
        navItems.map((item) => (
          <a
            class:list={[
              'btn btn-sm w-full text-left justify-start',
              {
                'btn-ghost': !item.match(currentPath),
                'btn-primary': item.match(currentPath),
              },
            ]}
            href={item.href}>
            {item.label}
          </a>
        ))
      }
    </div>
    <div class="modal-action">
      <form method="dialog">
        <button class="btn">
          {normalizedLocale === 'zh-cn' ? '关闭' : 'Close'}
        </button>
      </form>
    </div>
  </div>
  <form method="dialog" class="modal-backdrop bg-black/20 backdrop-blur-sm">
    <button>关闭</button>
  </form>
</dialog>

<!-- 搜索模态框 -->
<dialog id="my_modal_1" class="modal">
  <div class="modal-box bg-base-300 text-base-content">
    <Search />
    <div class="modal-action">
      <form method="dialog">
        <button class="btn">
          {normalizedLocale === 'zh-cn' ? '关闭' : 'Close'}
        </button>
      </form>
    </div>
  </div>
  <form method="dialog" class="modal-backdrop bg-black/20 backdrop-blur-sm">
    <button>关闭</button>
  </form>
</dialog>

<style is:global>
  .pagefind-ui {
    --pagefind-ui-scale: 0.75;
    --pagefind-ui-primary: var(--p);
    --pagefind-ui-text: var(--bc);
    --pagefind-ui-border: var(--n);
    --pagefind-ui-border-width: 1px;
    --pagefind-ui-border-radius: 0.25rem;
    --pagefind-ui-font: sans-serif;
    width: 100%;
  }

  .pagefind-ui.yellow {
    --pagefind-ui-background: lightyellow;
  }

  .pagefind-ui.red {
    --pagefind-ui-background: peachpuff;
    width: 100%;
  }

  .pagefind-ui .pagefind-ui__drawer:not(.pagefind-ui__hidden) {
    position: relative;
    padding: 0;
    box-shadow: none;
    background-color: transparent;
  }

  .pagefind-ui .pagefind-ui__result-link {
    color: var(--pagefind-ui-primary);
  }

  .pagefind-ui .pagefind-ui__result-excerpt {
    color: var(--pagefind-ui-text);
  }

  /* 响应式调整 */
  @media (max-width: 1023px) {
    .modal-box {
      max-height: 80vh;
      overflow-y: auto;
    }
  }

  /* 模态框动画 */
  .modal {
    transition-duration: 200ms;
  }

  .modal-box {
    transition-duration: 300ms;
    transform-origin: center;
  }

  @keyframes slideUp {
    from {
      transform: translateY(1rem);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  .modal[open] .modal-box {
    animation: slideUp 0.3s ease-out forwards;
  }

  .modal[open] .modal-backdrop {
    animation: fadeIn 0.2s ease-out forwards;
  }
</style>

<script>
  function initializeThemeSwitch() {
    const themeItems = document.querySelectorAll('[data-set-theme]');
    const updateActiveTheme = (currentTheme: string) => {
      themeItems.forEach((item) => {
        const themeId = item.getAttribute('data-set-theme');
        const isActive = themeId === currentTheme;
        item.classList.toggle('bg-primary', isActive);
        item.classList.toggle('text-primary-content', isActive);
      });
    };

    themeItems.forEach((item) => {
      // 移除可能存在的旧事件监听器
      item.removeEventListener('click', handleThemeClick);
      // 添加新的事件监听器
      item.addEventListener('click', handleThemeClick);
    });

    function handleThemeClick(event: Event) {
      const item = event.currentTarget as HTMLElement;
      const theme = item.getAttribute('data-set-theme');
      document.documentElement.setAttribute('data-theme', theme ?? 'default');
      localStorage.setItem('theme', theme ?? 'default');
      updateActiveTheme(theme ?? 'default');
    }

    // 从本地存储中获取主题并更新激活状态
    const savedTheme = localStorage.getItem('theme') || 'default';
    document.documentElement.setAttribute('data-theme', savedTheme);
    updateActiveTheme(savedTheme);
  }

  // 初始加载时初始化
  document.addEventListener('DOMContentLoaded', initializeThemeSwitch);

  // Astro view transitions 后重新初始化
  document.addEventListener('astro:after-swap', initializeThemeSwitch);
</script>
